name: Auto Update Worker

on:
  workflow_dispatch:
    inputs:
      force_update:
        type: boolean
        description: '是否强制更新（忽略版本检查）'
        required: false
        default: false

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置环境
        run: |
          echo "REPO_URL=https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases" >> $GITHUB_ENV
          echo "TARGET_FILE=worker.zip" >> $GITHUB_ENV

      - name: 检查并更新 Worker
        id: check_update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 日志函数
          log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

          log "开始检查更新..."

          # 获取本地版本
          LOCAL_VERSION=$(cat version.txt 2>/dev/null || echo "")
          log "本地版本: ${LOCAL_VERSION:-无}"

          # 获取最新 Release
          log "获取最新 Release 信息..."
          RESPONSE=$(curl -s --retry 3 -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$REPO_URL")
          if [ $? -ne 0 ] || [ -z "$RESPONSE" ]; then
            log "ERROR: 无法访问 GitHub API 或响应为空"
            exit 1
          fi

          # 提取最新 release 的 tag_name 和下载链接
          TAG_NAME=$(echo "$RESPONSE" | jq -r '.[0].tag_name')
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r --arg file "$TARGET_FILE" '.[0].assets[] | select(.name == $file) | .browser_download_url')

          if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" == "null" ]; then
            log "ERROR: 无法获取最新版本号"
            exit 1
          fi

          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
            log "ERROR: 未找到 $TARGET_FILE 的下载链接"
            exit 1
          fi

          log "最新版本: $TAG_NAME"

          # 判断是否需要更新
          FORCE_UPDATE=${{ github.event.inputs.force_update }}
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "已是最新版本，无需更新"
            # 设置输出用于提交消息
            echo "tag_name=$LOCAL_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 下载并更新文件
          log "下载 $TARGET_FILE..."
          if ! wget -q -O "$TARGET_FILE" "$DOWNLOAD_URL"; then
            log "ERROR: 下载失败"
            exit 1
          fi

          log "解压 $TARGET_FILE..."
          unzip -o "$TARGET_FILE" || { log "ERROR: 解压失败"; exit 1; }
          rm "$TARGET_FILE"

          # 更新本地版本记录
          echo "$TAG_NAME" > version.txt
          log "更新完成，新版本: $TAG_NAME"

          # 输出新版本号供后续步骤使用
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: 提交更改
        if: steps.check_update.outputs.tag_name != '' && steps.check_update.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔄 自动同步 Worker 版本: ${{ steps.check_update.outputs.tag_name }}"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          repository: .
          branch: ${{ github.ref }}
